
#########################
## Imports.
#########################
import datetime
# Obligatory OpenSAFELY import.
from cohortextractor import (
	StudyDefinition,
	patients, codelist,
	codelist_from_csv,
    codelist
)
# Import codelists.py script.
from codelists import *
# Import study_parameters.
#/////import study_parameters
# # Define variables explicitly from study_parameters
start_date = "2018-03-17" #study_parameters["start_date"]
end_date = "2022-03-17" #study_parameters["end_date"]

#########################
## Study definition.
#########################
study = StudyDefinition(
	default_expectations = {
		"date": {"earliest": start_date, "latest": end_date},
		"rate": "uniform",
		"incidence": 0.5,
	},

	population = patients.satisfying(
		"""
        has_surgery
        """,
        # has_surgery = patients.with_these_clinical_events(
			# codelist_cancer_surgery,
			# on_or_after = start_date
		# ),
	# ),
    
    has_surgery = patients.with_these_clinical_events(
			codelist_cancer_surgery,
			on_or_after = start_date,
            returning = "binary_flag"
		),
        
    has_cancer = patients.with_these_clinical_events(
			codelist_cancer,
			on_or_after = start_date,
            returning = "binary_flag"
		),
        
	#############################################
	## Variables for calculating exposure.
	#############################################
	    
	### Date of surgery.
	date_surgery = patients.with_these_clinical_events(
		codelist_cancer_surgery,
        on_or_after = start_date,
		returning = "date",
		date_format = "YYYY-MM-DD",
		return_expectations={
			"date": {"earliest": start_date, "latest": "today"},
			"rate": "uniform",
			"incidence": 0.5}
	),
    
    ### Date of cancer.
	date_cancer = patients.with_these_clinical_events(
		codelist_cancer,
        on_or_after = start_date,
		returning = "date",
		date_format = "YYYY-MM-DD",
		return_expectations={
			"date": {"earliest": start_date, "latest": "today"},
			"rate": "uniform",
			"incidence": 0.5}
	),
    
	## Type of SARS-CoV-2 test: {LFT, PCR, both}.
    SARS_CoV_2_test_type = patients.with_test_result_in_sgss(
        pathogen = "SARS-CoV-2",
        returning = "case_category",
        test_result = "positive",
        
        on_or_before = "date_surgery",
        return_expectations = {
            "incidence" : 1,
            "category": {"ratios": {"": 0.3, "LFT_Only": 0.4, "PCR_Only": 0.2, "LFT_WithPCR": 0.1}},
             }
    ),
    
    ## COVID symptomatic: {"", "Y", "N"}.
    SARS_CoV_2_symptomatic = patients.with_test_result_in_sgss(
        pathogen = "SARS-CoV-2",
        returning = "symptomatic",
        restrict_to_earliest_specimen_date = False,
        on_or_before = "date_surgery",
        return_expectations = {
            "incidence" : 1,
            "category": {"ratios": {"": 0.5, "Y": 0.3, "N": 0.2}},
             }
    ),
    
    ## Date of testing.
    # Any result.
    date_latest_test_preOp_SARS_CoV_2_outcome_any = patients.with_test_result_in_sgss(
        pathogen = "SARS-CoV-2",
        on_or_before = "date_surgery",
        find_last_match_in_period = True,
        returning = "date",
        date_format = "YYYY-MM-DD",
        test_result = "any"  
    ),
    # Positive result.
    date_latest_test_preOp_SARS_CoV_2_outcome_positive = patients.with_test_result_in_sgss(
        pathogen = "SARS-CoV-2",
        on_or_before = "date_surgery",
        find_last_match_in_period = True,
        returning = "date",
        date_format = "YYYY-MM-DD",
        test_result = "positive"  
    ),
    # Negative result.
    date_latest_test_preOp_SARS_CoV_2_outcome_negative = patients.with_test_result_in_sgss(
        pathogen = "SARS-CoV-2",
        on_or_before = "date_surgery",
        find_last_match_in_period = True,
        returning = "date",
        date_format = "YYYY-MM-DD",
        test_result = "negative"  
    ),


	#############################################
	## Variables for calculating outcomes.
	#############################################
	
	## Date of death.
	## Date of death from GP data.
    ## Only gives year. Don't bother.
	# date_death_gp = patients.with_death_recorded_in_primary_care(
		# on_or_after = start_date,
		# returning = "date_of_death",
		# return_expectations = {
			# "date": {"earliest" : start_date},
			# "rate": "exponential_increase"
		# },
	# ),
	# Date of death from ONS data.
	date_death_ons = patients.died_from_any_cause(
		on_or_after = start_date,
		returning = "date_of_death",
		date_format = "YYYY-MM-DD",
		return_expectations = {
			"date": {"earliest" : start_date},
			"rate": "exponential_increase"
		},
	),
	# Date of death from CPNS data.
	date_death_cpns = patients.with_death_recorded_in_cpns(
		on_or_after = start_date,
		returning = "date_of_death",
		date_format = "YYYY-MM-DD",
		return_expectations = {
			"date": {"earliest" : start_date},
			"rate": "exponential_increase"
		},
	),

	## Date of post-operative pulmonary complications.
	date_postOp_pulmonary_complication = patients.with_these_clinical_events(
        codelist_pulmonary_complications,
		on_or_after = "date_surgery",
		returning = "date",
		date_format = "YYYY-MM-DD",
	),
    
    ## Date of post-operatve cardiac complications.
	date_postOp_cardiac_complication = patients.with_these_clinical_events(
        codelist_cardiac_complications,
		on_or_after = "date_surgery",
		returning = "date",
		date_format = "YYYY-MM-DD",
	),

	## Date of post-operative cerebrovascular complications.
	date_postOp_cerebrovascular_complication = patients.with_these_clinical_events(
		codelist_cerebrovascular_complications,
		on_or_after = "date_surgery",
		returning = "date",
		date_format = "YYYY-MM-DD",
	),

	## Variables to calculate 'length of stay'.
	# Date of admission.
	# date_hospital_admission = patients.admitted_to_hospital(
		# returning = "date_admitted",
		# on_or_before = "date_surgery",
		# find_first_match_in_period = True,
		# with_these_procedures = codelist_cancer_surgery,
		# date_format = "YYYY-MM-DD",
		# return_expectations = {
			# "date": {"earliest": start_date, "latest": "today"}
		# }
	# ),
	##Date of post-operative discharge.
	# date_postOp_discharge = patients.admitted_to_hospital(
		# returning = "date_discharged",
		# on_or_after = "date_surgery",
		# find_first_match_in_period = True,
		# with_these_procedures = codelist_cancer_surgery,
 		# date_format = "YYYY-MM-DD",
		# return_expectations = {
			# "date": {"earliest": date_surgery, "latest": "today"}
		# }
	# ),

	## Variables to calculate 'discharge to a destination difference
	## from the pre-operative residence'.
	## Source of admission.
	# source_of_admission = patients.admitted_to_hospital(
		# returning = "source_of_admission",
		# on_or_after = start_date,
		# find_first_match_in_period = True,
		# with_these_procedures = codelist_cancer_surgery,
		# return_expectations = {
		#	#I don't know what the permitted values are, so 
		#	#I can't suggest proportions of categories.
			# {"category": {"ratios": {"21": 0.6, "22": 0.4 }}, "incidence" : 1}
			# }
	# ),
	## Discharge destination.
	# discharge_destination = patients.admitted_to_hospital(
		# returning = "discharge_destination",
		# on_or_after = "date_surgery",
		# find_first_match_in_period = True,
		# with_these_procedures = codelist_cancer_surgery,
		# return_expectations = {
		#	#I don't know what the permitted values are, so 
		#	#I can't suggest proportions of categories.
            # {"category": {"ratios": {"21": 0.6, "22": 0.4 }}, "incidence" : 1}
			# }
	# ),

	### Post-operative emergency attendance.
	# date_postOp_emergency_dept_attendance = patients.attended_emergency_care(
		# on_or_after = "date_surgery",
		# returning = "date_arrived",
		# date_format = "YYYY-MM-DD",
		# return_expectations = {
			# "date": {"earliest": date_surgery, "latest": "today"},
			# "rate": "uniform"
		# }
	# ),

	#############################################
	## Variables for calculating covarites.
	#############################################
	## Age
	# Age, in years.
	age_at_surgery = patients.age_as_of(
		"date_surgery",
	        return_expectations = {
        	        "rate": "universal",
                	"int": {"distribution": "population_ages"}
		        }
	),
	# Age group, in accordance with the original COVIDSurg study.
	age_group_surgery = patients.categorised_as(
        	{
            "0-29" : "age_at_surgery <= 29",
	        "30-49": "age_at_surgery > 29 AND age_at_surgery <= 49",
	        "50-69": "age_at_surgery > 49 AND age_at_surgery <= 69",
	        "70-79": "age_at_surgery > 69 AND age_at_surgery <= 79",
	        "80+"  : "age_at_surgery >= 80",
	        "Missing": "DEFAULT"
	        },
		return_expectations = {
                            "rate": "universal",
                            "category": {
                                        "ratios": {
                                                    "0-29": 0.229,
                                                    "30-49": 0.275,
                                                    "50-69": 0.304,
                                                    "70-79": 0.127,
                                                    "80+": 0.064 ,
                                                    "Missing": 0.001,
                                                    }
                                        },
                              },
	),

	## Sex
	Sex = patients.sex(
		return_expectations = {
			"rate": "universal",
			"category": {"ratios": {"Female": 0.4, "Male": 0.4, "F": 0.1, "M": 0.1}}
			}
	),

    ### Indicator of COVID vaccination.
    ## Indicator of first COVID vaccination.
    COVID_first_vaccination_SNOMED = patients.with_these_clinical_events(
		codelist_COVID_first_vaccination,
        on_or_before = "date_latest_test_preOp_SARS_CoV_2_outcome_positive",
        returning = "binary_flag"
	),
    ## Indicator of second COVID vaccination.
    COVID_second_vaccination_SNOMED = patients.with_these_clinical_events(
		codelist_COVID_second_vaccination,
        on_or_before = "date_latest_test_preOp_SARS_CoV_2_outcome_positive",
        returning = "binary_flag"
	),
    ## Indicator of declining first COVID vaccination.
    COVID_first_vaccination_declined_SNOMED = patients.with_these_clinical_events(
		codelist_COVID_first_vaccination_declined,
        on_or_before = "date_latest_test_preOp_SARS_CoV_2_outcome_positive",
		returning = "binary_flag"
	),
    ## Indicator of declining second COVID vaccination.
    COVID_second_vaccination_declined_SNOMED = patients.with_these_clinical_events(
		codelist_COVID_second_vaccination_declined,
        on_or_before = "date_latest_test_preOp_SARS_CoV_2_outcome_positive",
		returning = "binary_flag"
	),
   
        
	## Chronic cardiac disease.
	chronic_cardiac_disease = patients.with_these_clinical_events(
		codelist_chronic_cardiac_disease,
		on_or_before = "date_surgery",
		returning = "binary_flag",
		return_expectations={
			"incidence": 0.3
		}
	),
    
    ## Diabetes.
    diabetes = patients.with_these_clinical_events(
		codelist_diabetes,
		on_or_before = "date_surgery",
		returning = "binary_flag",
		return_expectations={
			"incidence": 0.3
		}
	),
    
    ## Chronic respiratory disease.
	chronic_respiratory_disease = patients.with_these_clinical_events(
		codelist_chronic_respiratory_disease,
		on_or_before = "date_surgery",
		returning = "binary_flag",
		return_expectations={
			"incidence": 0.3
		}
	),
    
    ## Cerebrovascular disease.
	cerebrovascular_disease = patients.with_these_clinical_events(
		codelist_cerebrovascular_complications,
		on_or_before = "date_surgery",
		returning = "binary_flag",
		return_expectations={
			"incidence": 0.3
		}
	),
    
	##'Urgency of surgery'.
    # This will require the definition of a special OPCS codelist using https://www.opencodelists.org/codelist/user/ciaranmci/add/
	admission_method = patients.admitted_to_hospital(
		with_these_procedures = OPCS_codelist_cancer_surgery,
		returning = "admission_method",
		on_or_after = start_date,
		find_first_match_in_period = True,
		return_expectations = {
			"category": {"ratios": {"11": 0.2, "12": 0.2, "13": 0.3, "21": 0.2, "2A": 0.1}}, 
			"incidence": 1
		}
	),
    # Categorised based on HES codes https://digital.nhs.uk/data-and-information/data-tools-and-services/data-services/hospital-episode-statistics/hospital-episode-statistics-data-dictionary
    category_admission_method = patients.categorised_as(
		{
		"Elective": "admission_method = '11' OR admission_method = '12' OR admission_method = '13'",
		"Emergency": "admission_method = '21' OR admission_method = '22' OR admission_method = '23' OR admission_method = '24' OR admission_method = '25'",
        "Emergency": "admission_method = '2A' OR admission_method = '2B' OR admission_method = '2C' OR admission_method = '2D' OR admission_method = '28'",
        "Missing": "DEFAULT"
		},
		return_expectations = {
			"rate": "universal",
			"category": {
				"ratios": {
					"Elective": 0.4,
					"Emergency": 0.4,
                    "Missing": 0.2
					}
				}
			}
	),

	### Local COVID-specific index of multiple deprivation.
	# address_deprivation_index = patients.address_as_of(
		# date = date_surgery,
		# returning = "index_of_multiple_deprivation",
		# round_to_nearest = 100,
		# return_expectations = {
			# "rate": "universal",
			# "category": {"ratios": {"100": 0.1, "200": 0.2, "300": 0.7}}
			# }
	# ),
    #

	## Perioperative practices.
	# ...
	
	## Cancer type.
	# ...

	## Cancer stage.
	# ...

	## Surgical Approach.
	# Open surgery.
	# ...
	# Laproscopic surgery.
	# ...
	# Conversion surgery.
	# ...

	## Regional SARS-CoV-2 prevalence.
	# ...
	
	## Local perioperative resource.
	# ...

	## Local COVID-non-specific perioperative practices.
	# ...

	## Local practices for scheduling surgeries.
	# ...

	## Regional testing practices.
	# ...




) # End of StudyDefinition().