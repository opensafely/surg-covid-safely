# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., interval_counts) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., PNV_OS_all_counts) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
# Interlace counts and percentages.
era_Strata <-
matrix(0,
nrow = length(rownames(n)),
ncol = length(colnames(n))*2) %>%
as.data.frame()
era_Strata[,seq(1,length(colnames(era_Strata)),2)] <- n
era_Strata[,seq(2,length(colnames(era_Strata)),2)] <- pct
colnames(era_Strata)[seq(1,length(colnames(era_Strata)),2)] <- colnames(n)
colnames(era_Strata)[seq(2,length(colnames(era_Strata)),2)] <- colnames(pct)
era_Strata <- i_table_to_use %>% dplyr::select(strata) %>%
dplyr::bind_cols(era_Strata)
era_Strata
table_to_use
table_counts
interval_counts = "all"
table_counts %>% add_rownames()
table_counts %>% rownames_to_column()
table_counts %>% rownames_to_column() %>% grepl(interval_counts, rowname)
table_counts %>% rownames_to_column() %>% grepl(interval_counts, .$rowname)
interval_counts
counts_to_use <-
table_counts %>% rownames_to_column()
grepl(interval_counts, counts_to_use$rowname)
counts_to_use <-#
table_counts %>% rownames_to_column() %>% which(grepl(interval_counts, .$rowname))
counts_to_use <-#
table_counts %>% rownames_to_column() %>% dplyr::filter(grepl(interval_counts, .$rowname))
table_counts %>% rownames_to_column() %>% dplyr::filter(grepl(interval_counts, .$rowname))
interval_counts <- "NC"
table_counts %>% rownames_to_column() %>% dplyr::filter(grepl(interval_counts, .$rowname))
interval_counts <- "C_within_3m"
table_counts %>% rownames_to_column() %>% dplyr::filter(grepl(interval_counts, .$rowname))
interval_counts <- "C_within3m"
table_counts %>% rownames_to_column() %>% dplyr::filter(grepl(interval_counts, .$rowname))
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname)) %>%
dplyr::select(-rowname)
intervals_counts = "all"
# Make tables
table_to_use <- table_to_use %>% dplyr::rename(strata = strata_col)
counts_to_use #<-
counts_to_use <-
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname)) %>%
dplyr::select(-rowname)
i_era
table_to_use %>%
dplyr::filter(era == i_era, strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
counts_to_use <-
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname))
counts_to_use
counts_to_use <-
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname))
counts_to_use
interval_counts
interval_counts = "all"
counts_to_use <-
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname))
counts_to_use
era_shortname[i_era]
era_shortname[count]
era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname
#era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname <- c("PP", "PNV", "CSP", "PWV")
#era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname <- c("PP", "PNV", "CSP", "PWV")
era_shortname[count]
#era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname <- c("PP", "PNV", "CSP", "PWV")
era_shortname
era_shortname[counter]
counts_to_use %>%
dplyr::filter(grepl(era_shortname[counter], .$rowname))
length(era_longname)
era_longname[i]
i=1
era_longname[i]
i
# Define reusable items.
era_longname <- c("Pre-pandemic", "Pandemic no vaccine",
"COVIDSurg data collection period", "Pandemic with vaccine")
#era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname <- c("PP", "PNV", "CSP", "PWV")
# Make tables
table_to_use <- table_to_use %>% dplyr::rename(strata = strata_col)
counts_to_use <-
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname))
strata = "_ageGroup"
table_to_use = table1_ageGroup
strata_col = "age_group_surgery"
interval_counts = "all"
# Define reusable items.
era_longname <- c("Pre-pandemic", "Pandemic no vaccine",
"COVIDSurg data collection period", "Pandemic with vaccine")
#era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname <- c("PP", "PNV", "CSP", "PWV")
# Make tables
table_to_use <- table_to_use %>% dplyr::rename(strata = strata_col)
counts_to_use <-
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname))
table_to_use %>%
dplyr::filter(era == era_longname[i], strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
i_table_to_use <-
table_to_use %>%
dplyr::filter(era == era_longname[i], strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname))
i_counts_to_use <-
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname))
i_table_to_use  %>%
dplyr::select(-c("era", strata))
# Get counts per intervals and overall.
n <-
i_table_to_use  %>%
dplyr::select(-c("era", strata))
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100)
i_counts_to_use <-
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname)) %>% dplyr::select(-rowname)
# Get counts per intervals and overall.
n <- i_table_to_use %>% dplyr::select(-c("era", strata))
# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
pct
i_counts_to_use
i_table_to_use
17/73
24/73
# Interlace counts and percentages.
era_Strata <-
matrix(0,
nrow = length(rownames(n)),
ncol = length(colnames(n))*2) %>%
as.data.frame()
era_Strata[,seq(1,length(colnames(era_Strata)),2)] <- n
era_Strata[,seq(2,length(colnames(era_Strata)),2)] <- pct
colnames(era_Strata)[seq(1,length(colnames(era_Strata)),2)] <- colnames(n)
colnames(era_Strata)[seq(2,length(colnames(era_Strata)),2)] <- colnames(pct)
era_Strata <- i_table_to_use %>% dplyr::select(strata) %>%
dplyr::bind_cols(era_Strata)
era_Strata
# Assign era_shortname.
assign(x = era_shortname[i], value = era_Strata)
era_shortname[i]
# Assign era_shortname.
assign(x = paste0(era_shortname[i], strata), value = era_Strata)
for(i in length(era_longname))
{
i_table_to_use <-
table_to_use %>%
dplyr::filter(era == era_longname[i], strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
i_counts_to_use <-
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname)) %>% dplyr::select(-rowname)
# Get counts per intervals and overall.
n <- i_table_to_use %>% dplyr::select(-c("era", strata))
# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
# Interlace counts and percentages.
era_Strata <-
matrix(0,
nrow = length(rownames(n)),
ncol = length(colnames(n))*2) %>%
as.data.frame()
era_Strata[,seq(1,length(colnames(era_Strata)),2)] <- n
era_Strata[,seq(2,length(colnames(era_Strata)),2)] <- pct
colnames(era_Strata)[seq(1,length(colnames(era_Strata)),2)] <- colnames(n)
colnames(era_Strata)[seq(2,length(colnames(era_Strata)),2)] <- colnames(pct)
era_Strata <- i_table_to_use %>% dplyr::select(strata) %>%
dplyr::bind_cols(era_Strata)
# Assign era_shortname.
assign(x = paste0(era_shortname[i], strata), value = era_Strata)
# Clean up.
rm(n, pct)
}
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname[i], strata),
collapse=","),
")")))
paste(paste0(era_shortname, strata)
)
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname, strata)),
collapse=","),
")")))
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname, strata)),
collapse=","),
")"))
era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname, strata),
collapse=",")),
")"))
paste0(era_shortname, strata)
paste(paste0(era_shortname, strata),
collapse=",")
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname, strata),
collapse=","),
")")))
#era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname <- c("PP", "PNV", "CSP", "PWV")
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname, strata),
collapse=","),
")")))
for(i in length(era_longname))
{
i_table_to_use <-
table_to_use %>%
dplyr::filter(era == era_longname[i], strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
i_counts_to_use <-
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname)) %>% dplyr::select(-rowname)
# Get counts per intervals and overall.
n <- i_table_to_use %>% dplyr::select(-c("era", strata))
# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
# Interlace counts and percentages.
era_Strata <-
matrix(0,
nrow = length(rownames(n)),
ncol = length(colnames(n))*2) %>%
as.data.frame()
era_Strata[,seq(1,length(colnames(era_Strata)),2)] <- n
era_Strata[,seq(2,length(colnames(era_Strata)),2)] <- pct
colnames(era_Strata)[seq(1,length(colnames(era_Strata)),2)] <- colnames(n)
colnames(era_Strata)[seq(2,length(colnames(era_Strata)),2)] <- colnames(pct)
era_Strata <- i_table_to_use %>% dplyr::select(strata) %>%
dplyr::bind_cols(era_Strata)
# Assign era_shortname.
assign(x = paste0(era_shortname[i], strata), value = era_Strata)
# Clean up.
rm(n, pct)
}
i<-2
i_table_to_use <-
table_to_use %>%
dplyr::filter(era == era_longname[i], strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
i_table_to_use
i_counts_to_use <-
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname)) %>% dplyr::select(-rowname)
i_counts_to_use
i_table_to_use %>% dplyr::select(-c("era", strata))
# Get counts per intervals and overall.
n <- i_table_to_use %>% dplyr::select(-c("era", strata))
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100)
# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
# Interlace counts and percentages.
era_Strata <-
matrix(0,
nrow = length(rownames(n)),
ncol = length(colnames(n))*2) %>%
as.data.frame()
era_Strata[,seq(1,length(colnames(era_Strata)),2)] <- n
era_Strata[,seq(2,length(colnames(era_Strata)),2)] <- pct
colnames(era_Strata)[seq(1,length(colnames(era_Strata)),2)] <- colnames(n)
colnames(era_Strata)[seq(2,length(colnames(era_Strata)),2)] <- colnames(pct)
era_Strata <- i_table_to_use %>% dplyr::select(strata) %>%
dplyr::bind_cols(era_Strata)
era_Strata
paste0(era_shortname[i], strata)
# Assign era_shortname.
assign(x = paste0(era_shortname[i], strata), value = era_Strata)
# Clean up.
rm(n, pct)
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname, strata),
collapse=","),
")")))
rm(PP_ageGroup, PNV_ageGroup, CSP_ageGroup, PWV_ageGroup)
# Define reusable items.
era_longname <- c("Pre-pandemic", "Pandemic no vaccine",
"COVIDSurg data collection period", "Pandemic with vaccine")
#era_shortname <- paste0(c("PP", "PNV", "CSP", "PWV"), strata)
era_shortname <- c("PP", "PNV", "CSP", "PWV")
# Make tables
table_to_use <- table_to_use %>% dplyr::rename(strata = strata_col)
counts_to_use <-
table_counts %>% rownames_to_column() %>%
dplyr::filter(grepl(interval_counts, .$rowname))
for(i in length(era_longname))
{
i_table_to_use <-
table_to_use %>%
dplyr::filter(era == era_longname[i], strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
i_counts_to_use <-
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname)) %>% dplyr::select(-rowname)
# Get counts per intervals and overall.
n <- i_table_to_use %>% dplyr::select(-c("era", strata))
# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
# Interlace counts and percentages.
era_Strata <-
matrix(0,
nrow = length(rownames(n)),
ncol = length(colnames(n))*2) %>%
as.data.frame()
era_Strata[,seq(1,length(colnames(era_Strata)),2)] <- n
era_Strata[,seq(2,length(colnames(era_Strata)),2)] <- pct
colnames(era_Strata)[seq(1,length(colnames(era_Strata)),2)] <- colnames(n)
colnames(era_Strata)[seq(2,length(colnames(era_Strata)),2)] <- colnames(pct)
era_Strata <- i_table_to_use %>% dplyr::select(strata) %>%
dplyr::bind_cols(era_Strata)
# Assign era_shortname.
assign(x = paste0(era_shortname[i], strata), value = era_Strata)
# Clean up.
rm(n, pct)
}
i<-1
length(era_longname)
for(i in 1:length(era_longname))
{
i_table_to_use <-
table_to_use %>%
dplyr::filter(era == era_longname[i], strata !="Missing") %>%
dplyr::arrange(strata) %>% dplyr::ungroup()
i_counts_to_use <-
counts_to_use %>%
dplyr::filter(grepl(era_shortname[i], .$rowname)) %>% dplyr::select(-rowname)
# Get counts per intervals and overall.
n <- i_table_to_use %>% dplyr::select(-c("era", strata))
# Get percentages per intervals and overall.
pct <-
n %>% mapply('/', ., i_counts_to_use) %>% '*'(100) %>%
tibble::as_tibble() %>%
dplyr::mutate(dplyr::across(, ~ ifelse(is.nan(.),NA,.))) %>%
tidyr::replace_na(list("n_all_intervals" = 0, "n_infection_none" = 0,
"n_infection_0to2wk" = 0, "n_infection_3to4wk" = 0,
"n_infection_5to6wk" = 0, "n_infection_7wk" = 0
)) %>%
`colnames<-`(c("pct_all_intervals", "pct_infection_none", "pct_infection_0to2wk",
"pct_infection_3to4wk", "pct_infection_5to6wk", "pct_infection_7wk"))
# Interlace counts and percentages.
era_Strata <-
matrix(0,
nrow = length(rownames(n)),
ncol = length(colnames(n))*2) %>%
as.data.frame()
era_Strata[,seq(1,length(colnames(era_Strata)),2)] <- n
era_Strata[,seq(2,length(colnames(era_Strata)),2)] <- pct
colnames(era_Strata)[seq(1,length(colnames(era_Strata)),2)] <- colnames(n)
colnames(era_Strata)[seq(2,length(colnames(era_Strata)),2)] <- colnames(pct)
era_Strata <- i_table_to_use %>% dplyr::select(strata) %>%
dplyr::bind_cols(era_Strata)
# Assign era_shortname.
assign(x = paste0(era_shortname[i], strata), value = era_Strata)
# Clean up.
rm(n, pct)
}
eval(parse(text = paste0("output <- list(",
paste(paste0(era_shortname, strata),
collapse=","),
")")))
rm(list = ls())
###################
## Prerequisites ##
###################
# ----
source(here::here("analysis","dataset_preparation.R"))
source(here::here("analysis","Make_table_COVIDSurg_compare.R"))
# Make Table1 for all patients.
myDataSelect <- myData %>%
dplyr::filter(postOp_mortality_30day %in% c("Dead within 30 days post-operation",
"Alive within 30 days post-operation",
"No death recorded"),
preOperative_infection_status!=
"Error: Test result after surgery. Check study_definition.")
data_to_use <- myDataSelect %>% dplyr::filter(has_surgery == TRUE)
sensitivity_cohort <- "all"
source(here::here("analysis","Make_Table1.R"))
# ----
tbl_PP_demogs
####################
## Table 1 Demogs ##
####################
# Define base tables. ----
# Pre-pandemic.
table1Demogs_PP <-
tbl_PP_demogs %>% dplyr::filter(variable != "Age group")
table1Demogs_PP %>% dplyr::select(-c(variable, strata)) %>%
sapply(as.double)
table1Demogs_PP[,3:ncol(table1Demogs_PP)] <-
table1Demogs_PP %>% dplyr::select(-c(variable, strata)) %>%
sapply(as.double)
table1Demogs_PP
tbl_PNV_demogs %>% dplyr::filter(variable != "Age group")
# Pandemic no vaccine.
table1Demogs_PNV <-
tbl_PNV_demogs %>% dplyr::filter(variable != "Age group")
table1Demogs_PNV[,3:ncol(table1Demogs_PNV)] <-
table1Demogs_PNV %>% dplyr::select(-c(variable, strata)) %>%
sapply(as.double)
# COVIDSurg data collection period.
table1Demogs_CSP <-
tbl_CSP_demogs %>% dplyr::filter(variable != "Age group")
table1Demogs_CSP[,3:ncol(table1Demogs_CSP)] <-
table1Demogs_CSP %>% dplyr::select(-c(variable, strata)) %>%
sapply(as.double)
# Pandemic with vaccine.
table1Demogs_PWV <-
tbl_PWV_demogs %>% dplyr::filter(variable != "Age group")
table1Demogs_PWV[,3:ncol(table1Demogs_PWV)] <-
table1Demogs_PWV %>% dplyr::select(-c(variable, strata)) %>%
sapply(as.double)
table1Demogs_PWV
View(table_counts)
OS_all_counts
data_to_use <- myDataSelect %>% dplyr::filter(has_surgery == TRUE)
data_to_use %>% select(postOp_mortality_30day) %>% table()
myData %>% select(postOp_mortality_30day) %>% table()
data_to_use %>%
dplyr::filter(postOp_mortality_30day %in% c("Dead within 30 days post-operation",
"Alive within 30 days post-operation",
"No death recorded")) %>% select(postOp_mortality_30day) %>% table()
rm(list=l())
rm(list=ls())
# Process th raw input.
source(here::here("analysis","dataset_preparation.R"))
# mydata
myData %>%
dplyr::select(category_admission_method,
age_group_surgery#admission_method_patient_classification
) %>%
table()
