# Join the two list based on the SNOMED CT code.
mapping_join <- surgeries %>%
dplyr::left_join(TRUDmap,
by = c("code" = "referencedComponentId")
)
colnames(mapping_join)[1] <- "SNOMED_CT"
colnames(mapping_join)[12] <- "OPCS4_or_ICD10"
# Convert OPCS4_or_ICD10 to XX.X format.
mapping_join$OPCS4_or_ICD10 <-
ifelse(mapping_join$OPCS4_or_ICD10 != "#NIS",
sub("(.{3})(.*)", "\\1.\\2",
mapping_join$OPCS4_or_ICD10),
mapping_join$OPCS4_or_ICD10 )
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% select(c("id", "term", "SNOMED_CT", "OPCS4_or_ICD10"))
# Save file.
write.csv(
x = to_save,
file = paste0(folder_loc, "/","our_SNOMED_codelist_with_TRUD_mapping.csv")
)
}
# Get OPCS-4 codes from Abbott et al 2017 (doi: 10.1093/bja/aex137).
abbott_restrictive <- read_csv(paste0(folder_loc,
"/Abbott_restrictive.csv"),
col_names = F) %>%
`colnames<-`("OPCS4")
abbott_intermediate <- read_csv(paste0(folder_loc,
"/Abbott_intermediate.csv"),
col_names = F) %>%
`colnames<-`("OPCS4")
# Extract OPCS-4 codes from out joining map and take only the first 3 digits.
our_map_3digits <-
ifelse(our_SNOMED_codelist_with_TRUD_mapping$OPCS4_or_ICD10 != "#NIS",
substr(our_SNOMED_codelist_with_TRUD_mapping$OPCS4_or_ICD10,1,3),
"#NIS") %>% as.data.frame() %>% `colnames<-`("OPCS4") %>% unique()
# Use various joins to tell what is shared and not shared between the lists.
shared_codes_Restrictive <-
dplyr::intersect(our_map_3digits, abbott_restrictive) %>%
dplyr::arrange(OPCS4)
shared_codes_Intermediate <-
dplyr::intersect(our_map_3digits, abbott_intermediate) %>%
dplyr::arrange(OPCS4)
Us_not_Abbott_codes_Restrictive <-
dplyr::setdiff(our_map_3digits, abbott_restrictive) %>%
dplyr::arrange(OPCS4)
Us_not_Abbott_codes_Intermediate <-
dplyr::setdiff(our_map_3digits, abbott_intermediate) %>%
dplyr::arrange(OPCS4)
Abbott_not_Us_codes_Restrictive <-
dplyr::setdiff(abbott_restrictive, our_map_3digits) %>%
dplyr::arrange(OPCS4)
Abbott_not_Us_codes_Intermediate <-
dplyr::setdiff(abbott_intermediate, our_map_3digits) %>%
dplyr::arrange(OPCS4)
# Map the OPCS-4 codes to descriptions.
TRUD_map_3digits <-
TRUDmap %>% tibble::add_column(
ifelse(TRUDmap$mapTarget != "#NIS",
substr(TRUDmap$mapTarget,1,3),
"#NIS"))
colnames(TRUD_map_3digits)[ncol(TRUD_map_3digits)] <- "OPCS_3digits"
a<-TRUD_map_3digits %>% dplyr::right_join(shared_codes_Restrictive,.,
by = c("OPCS4"="OPCS_3digits")
)
#
Similarities_and_differences <-
qpcR:::cbind.na(shared_codes_Restrictive, shared_codes_Intermediate,
Us_not_Abbott_codes_Restrictive,
Us_not_Abbott_codes_Intermediate,
Abbott_not_US_codes_Restrictive,
Abbott_not_US_codes_Intermediate) %>%
`colnames<-`(c("shared_codes_Restrictive", "shared_codes_Intermediate",
"Us_not_Abbott_codes_Restrictive",
"Us_not_Abbott_codes_Intermediate",
"Abbott_not_US_codes_Restrictive",
"Abbott_not_US_codes_Intermediate"))
# Save file.
write.csv(
x = Similarities_and_differences,
file = paste0(folder_loc, "/","Similarities_and_differences.csv")
)
# Load TRUDmap
if(file.exists("TRUD_file.csv") == T)
{
TRUDmap<-read_csv(paste0(folder_loc,"/TRUD_file.csv"))
}
# Create 3-digit OPCS codes.
OPCS_3digits <- substr(x = TRUDmap$mapTarget, start = 1, stop = 3)
# Append the 3-digit OPCS codes to TRUDmap.
TRUDmap <- TRUDmap %>% tibble::add_column(OPCS_3digits)
# Codes to add from Abbott et al 2017
codes_to_add <- c("A33","A34","A84","E63","J73","J77","K65","L73","L76","L89","M15","M17","M86","O04","O20","Q39","R02","R29","S49","T88","W80","W87","W99")
# Identify the rows from TRUDmap associated with these codes.
TRUDmap_codes_to_add <- TRUDmap %>% dplyr::filter(OPCS_3digits %in% codes_to_add)
# Check if any SNOMED mappings are missing. # The TRUDmap is missing "J77".
dplyr::setdiff(codes_to_add, unique(TRUDmap_codes_to_add$OPCS_3digits))
# Extract SNOMED CT codes.
Abbott_codes <- TRUDmap_codes_to_add %>% dplyr::select("referencedComponentId") %>% as.matrix()
#tibble::add_column(character(length = nrow(.))) %>% `colnames<-`(c("code", "term") )
write.table(
x = Abbott_codes,
sep = ",",
file = paste0(folder_loc, "/","Abbott SNOMED CT codes to add.csv"),
row.names = F,
col.names = F
)
# Load our surgery codelist.
surgeries <- read_csv(paste0(folder_loc,
"/user-ciaranmci-surgery-covidsurg-replication-excluding-exclusions.csv"),
col_types = cols(code = col_character()
)
)
# Load TRUD map.
TRUDmap <- read_delim(paste0(folder_loc, "SnomedCT_UKClinicalRF2_PRODUCTION_20220608T000001Z", "/Full",
"/RefSet", "/Map", "/der2_iisssciRefset_ExtendedMapUKCLFull_GB1000000_20220608.txt"),
delim = "\t", escape_double = FALSE,
col_types = cols(effectiveTime = col_character(),
moduleId = col_character(),
refsetId = col_character(),
referencedComponentId = col_character()
),
trim_ws = TRUE)
# Join the two list based on the SNOMED CT code.
mapping_join <- surgeries %>%
dplyr::left_join(TRUDmap,
by = c("code" = "referencedComponentId")
)
colnames(mapping_join)[1] <- "SNOMED_CT"
colnames(mapping_join)[12] <- "OPCS4_or_ICD10"
# Convert OPCS4_or_ICD10 to XX.X format.
mapping_join$OPCS4_or_ICD10 <-
ifelse(mapping_join$OPCS4_or_ICD10 != "#NIS",
sub("(.{3})(.*)", "\\1.\\2",
mapping_join$OPCS4_or_ICD10),
mapping_join$OPCS4_or_ICD10 )
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% select(c("id", "term", "SNOMED_CT", "OPCS4_or_ICD10"))
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% select(id, term, SNOMED_CT, OPCS4_or_ICD10)
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% dplyr::select(c(id, term, SNOMED_CT, OPCS4_or_ICD10))
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% dplyr::select(id, term, SNOMED_CT, OPCS4_or_ICD10)
# Save file.
write.csv(
x = to_save,
file = paste0(folder_loc, "/","our_SNOMED_codelist_with_TRUD_mapping.csv")
)
# Get OPCS-4 codes from Abbott et al 2017 (doi: 10.1093/bja/aex137).
abbott_restrictive <- read_csv(paste0(folder_loc,
"/Abbott_restrictive.csv"),
col_names = F) %>%
`colnames<-`("OPCS4")
abbott_intermediate <- read_csv(paste0(folder_loc,
"/Abbott_intermediate.csv"),
col_names = F) %>%
`colnames<-`("OPCS4")
# Extract OPCS-4 codes from out joining map and take only the first 3 digits.
our_map_3digits <-
ifelse(our_SNOMED_codelist_with_TRUD_mapping$OPCS4_or_ICD10 != "#NIS",
substr(our_SNOMED_codelist_with_TRUD_mapping$OPCS4_or_ICD10,1,3),
"#NIS") %>% as.data.frame() %>% `colnames<-`("OPCS4") %>% unique()
# Use various joins to tell what is shared and not shared between the lists.
shared_codes_Restrictive <-
dplyr::intersect(our_map_3digits, abbott_restrictive) %>%
dplyr::arrange(OPCS4)
shared_codes_Intermediate <-
dplyr::intersect(our_map_3digits, abbott_intermediate) %>%
dplyr::arrange(OPCS4)
Us_not_Abbott_codes_Restrictive <-
dplyr::setdiff(our_map_3digits, abbott_restrictive) %>%
dplyr::arrange(OPCS4)
Us_not_Abbott_codes_Intermediate <-
dplyr::setdiff(our_map_3digits, abbott_intermediate) %>%
dplyr::arrange(OPCS4)
Abbott_not_Us_codes_Restrictive <-
dplyr::setdiff(abbott_restrictive, our_map_3digits) %>%
dplyr::arrange(OPCS4)
Abbott_not_Us_codes_Intermediate <-
dplyr::setdiff(abbott_intermediate, our_map_3digits) %>%
dplyr::arrange(OPCS4)
# Map the OPCS-4 codes to descriptions.
TRUD_map_3digits <-
TRUDmap %>% tibble::add_column(
ifelse(TRUDmap$mapTarget != "#NIS",
substr(TRUDmap$mapTarget,1,3),
"#NIS"))
colnames(TRUD_map_3digits)[ncol(TRUD_map_3digits)] <- "OPCS_3digits"
#
Similarities_and_differences <-
qpcR:::cbind.na(shared_codes_Restrictive, shared_codes_Intermediate,
Us_not_Abbott_codes_Restrictive,
Us_not_Abbott_codes_Intermediate,
Abbott_not_US_codes_Restrictive,
Abbott_not_US_codes_Intermediate) %>%
`colnames<-`(c("shared_codes_Restrictive", "shared_codes_Intermediate",
"Us_not_Abbott_codes_Restrictive",
"Us_not_Abbott_codes_Intermediate",
"Abbott_not_US_codes_Restrictive",
"Abbott_not_US_codes_Intermediate"))
#
Similarities_and_differences <-
qpcR:::cbind.na(shared_codes_Restrictive, shared_codes_Intermediate,
Us_not_Abbott_codes_Restrictive,
Us_not_Abbott_codes_Intermediate,
Abbott_not_Us_codes_Restrictive,
Abbott_not_Us_codes_Intermediate) %>%
`colnames<-`(c("shared_codes_Restrictive", "shared_codes_Intermediate",
"Us_not_Abbott_codes_Restrictive",
"Us_not_Abbott_codes_Intermediate",
"Abbott_not_US_codes_Restrictive",
"Abbott_not_US_codes_Intermediate"))
# Save file.
write.csv(
x = Similarities_and_differences,
file = paste0(folder_loc, "/","Similarities_and_differences.csv")
)
# Create 3-digit OPCS codes.
OPCS_3digits <- substr(x = TRUDmap$mapTarget, start = 1, stop = 3)
# Append the 3-digit OPCS codes to TRUDmap.
TRUDmap <- TRUDmap %>% tibble::add_column(OPCS_3digits)
# Codes to add from Abbott et al 2017
codes_to_add <- c("A33","A34","A84","E63","J73","J77","K65","L73","L76","L89","M15","M17","M86","O04","O20","Q39","R02","R29","S49","T88","W80","W87","W99")
# Identify the rows from TRUDmap associated with these codes.
TRUDmap_codes_to_add <- TRUDmap %>% dplyr::filter(OPCS_3digits %in% codes_to_add)
# Check if any SNOMED mappings are missing. # The TRUDmap is missing "J77".
dplyr::setdiff(codes_to_add, unique(TRUDmap_codes_to_add$OPCS_3digits))
# Extract SNOMED CT codes.
Abbott_codes <- TRUDmap_codes_to_add %>% dplyr::select("referencedComponentId") %>% as.matrix()
View(Abbott_codes)
# Extract SNOMED CT codes.
Abbott_codes <-
TRUDmap_codes_to_add %>% dplyr::select("referencedComponentId") %>%
as.matrix()%>% unique()
# Extract SNOMED CT codes.
Abbott_codes <-
TRUDmap_codes_to_add %>% dplyr::select("referencedComponentId") %>%
as.matrix() %>% unique() %>% data.frame()
#tibble::add_column(character(length = nrow(.))) %>% `colnames<-`(c("code", "term") )
write.table(
x = Abbott_codes,
sep = ",",
file = paste0(folder_loc, "/","Abbott SNOMED CT codes to add.csv"),
row.names = F,
col.names = F
)
list_of_packages <- c("tidyverse", "here", "qpcR")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
for (i in 1:length(list_of_packages))
{
library(list_of_packages[i],character.only = T)
}
# Set location.
folder_loc <- "C:/Users/medcmci/OneDrive - University of Leeds/PSTRC/OpenSAFELY/During study/Codelist/TRUD SNOMED to OPCS/"
setwd(folder_loc)
file.exists("our_surgeries_in_OPCS4.csv") == T
# Load our surgery codelist.
SNOMED_surgeries <- read_csv(paste0(folder_loc,
"/user-ciaranmci-surgery-covidsurg-replication-excluding-exclusions.csv"),
col_types = cols(code = col_character()
)
# Load the Abbot additions.
SNOMED_Abbott <- read_csv(paste0(folder_loc,
"/user-alwynkotze-surgery-covidsurg-replication-codes-from-abbott.csv"),
col_types = cols(code = col_character()
)
)
# Combine the two codelists.
surgeries <- SNOMED_surgeries %>% dplyr::bind_rows(SNOMED_Abbott)
# Load TRUD map.
TRUDmap <- read_delim(paste0(folder_loc, "SnomedCT_UKClinicalRF2_PRODUCTION_20220608T000001Z", "/Full",
"/RefSet", "/Map", "/der2_iisssciRefset_ExtendedMapUKCLFull_GB1000000_20220608.txt"),
delim = "\t", escape_double = FALSE,
col_types = cols(effectiveTime = col_character(),
moduleId = col_character(),
refsetId = col_character(),
referencedComponentId = col_character()
),
trim_ws = TRUE)
# Join the two list based on the SNOMED CT code.
mapping_join <- surgeries %>%
dplyr::left_join(TRUDmap,
by = c("code" = "referencedComponentId")
)
colnames(mapping_join)[1] <- "SNOMED_CT"
colnames(mapping_join)[12] <- "OPCS4_or_ICD10"
# Convert OPCS4_or_ICD10 to XX.X format.
mapping_join$OPCS4_or_ICD10 <-
ifelse(mapping_join$OPCS4_or_ICD10 != "#NIS",
sub("(.{3})(.*)", "\\1.\\2",
mapping_join$OPCS4_or_ICD10),
mapping_join$OPCS4_or_ICD10 )
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% dplyr::select(OPCS4_or_ICD10) %>%
dplyr::filter(!OPCS4_or_ICD10 %in% c("#NIS", "#HL.T", "#EP.O", "#NC."))
# Save file.
write.csv(
x = to_save,
file = paste0(folder_loc, "/","our_surgeries_in_OPCS4.csv"),
row.names=FALSE
)
}
# Load our surgery codelist.
SNOMED_surgeries <- read_csv(paste0(folder_loc,
"/user-ciaranmci-surgery-covidsurg-replication-excluding-exclusions.csv"),
col_types = cols(code = col_character()
)
)
# Load the Abbot additions.
SNOMED_Abbott <- read_csv(paste0(folder_loc,
"/user-alwynkotze-surgery-covidsurg-replication-codes-from-abbott.csv"),
col_types = cols(code = col_character()
)
)
# Combine the two codelists.
surgeries <- SNOMED_surgeries %>% dplyr::bind_rows(SNOMED_Abbott)
# Join the two list based on the SNOMED CT code.
mapping_join <- surgeries %>%
dplyr::left_join(TRUDmap,
by = c("code" = "referencedComponentId")
)
colnames(mapping_join)[1] <- "SNOMED_CT"
colnames(mapping_join)[12] <- "OPCS4_or_ICD10"
# Convert OPCS4_or_ICD10 to XX.X format.
mapping_join$OPCS4_or_ICD10 <-
ifelse(mapping_join$OPCS4_or_ICD10 != "#NIS",
sub("(.{3})(.*)", "\\1.\\2",
mapping_join$OPCS4_or_ICD10),
mapping_join$OPCS4_or_ICD10 )
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% dplyr::select(OPCS4_or_ICD10) %>%
dplyr::filter(!OPCS4_or_ICD10 %in% c("#NIS", "#HL.T", "#EP.O", "#NC.")) %>%
unique() %>% data.frame()
# Save file.
write.csv(
x = to_save,
file = paste0(folder_loc, "/","our_surgeries_in_OPCS4.csv"),
row.names=FALSE
)
getwd()
# Set location of the TRUD mapping table that is saved to the user's machine.
folder_loc <- folder.choose()
?file.choose
?dir.choose
# Set location of the TRUD mapping table that is saved to the user's machine.
folder_loc <- choose.dir()
here:here()
list_of_packages <- c("tidyverse", "here", "qpcR")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
for (i in 1:length(list_of_packages))
{
library(list_of_packages[i],character.only = T)
}
here:here()
here()
# map surgery codes from SNOMED to OPCS4.R
#
# As the file name suggests, the purpose of this script is to map our surgery
# codes from SNOMED-CT to OPCS-4.10.
# This is needed so that we we can query the same surgery procedures using both
# patients.with_these_clinical_events() call and with the
# patients.admitted_to_hospital() call with the `with_these_procedures` argument.
#
# NOTE: This script is provided for review, only. The script will not run on the
# OpenSAFELY job sever because it requires the TRUD mapping table that must be
# requested from NHS Digital. I do not have permission to upload the TRUD
# mapping table to OpenSAFELY and the tables are regularly updated anyway, so
# you'll want the lastest one.
# You can find the latest TRUD mapping tables on the NHS Digital website at
# https://isd.digital.nhs.uk/trud/users/guest/filters/0/categories/26
#
list_of_packages <- c("tidyverse", "here", "qpcR")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
for (i in 1:length(list_of_packages))
{
library(list_of_packages[i],character.only = T)
}
# Set location of the TRUD mapping table that is saved to the user's machine.
folder_loc <- choose.dir()
# Load our surgery codelist.
SNOMED_surgeries <-
read_csv(here::here(
"codelists",
"/user-ciaranmci-surgery-covidsurg-replication-excluding-exclusions.csv"),
col_types = cols(code = col_character()
)
)
# Load the Abbot additions.
SNOMED_Abbott <-
read_csv(here::here(
"codelists",
"/user-alwynkotze-surgery-covidsurg-replication-codes-from-abbott.csv"),
col_types = cols(code = col_character()
)
)
# Combine the two codelists.
surgeries <- SNOMED_surgeries %>% dplyr::bind_rows(SNOMED_Abbott)
# Load TRUD map.
TRUDmap <- read_delim(paste0(folder_loc, "\\SnomedCT_UKClinicalRF2_PRODUCTION_20220803T000001Z", "\\Full",
"\\RefSet", "\\Map", "\\der2_iisssciRefset_ExtendedMapUKCLFull_GB1000000_20220803.txt"),
delim = "\t", escape_double = FALSE,
col_types = cols(effectiveTime = col_character(),
moduleId = col_character(),
refsetId = col_character(),
referencedComponentId = col_character()
),
trim_ws = TRUE)
# Join the two list based on the SNOMED CT code.
mapping_join <- surgeries %>%
dplyr::left_join(TRUDmap,
by = c("code" = "referencedComponentId")
)
colnames(mapping_join)[1] <- "SNOMED_CT"
colnames(mapping_join)[12] <- "OPCS4_or_ICD10"
## *********************************************************************
## ** This little block of script might be useful for users in future **
## ** but OpenSAFELY reads OPCS-4.10 codes without the decimal point. **
## *********************************************************************
# # Convert OPCS4_or_ICD10 to XX.X format.
# mapping_join$OPCS4_or_ICD10 <-
#   ifelse(mapping_join$OPCS4_or_ICD10 != "#NIS",
#          sub("(.{3})(.*)", "\\1.\\2",
#              mapping_join$OPCS4_or_ICD10),
#          mapping_join$OPCS4_or_ICD10 )
## *********************************************************************
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% dplyr::select(OPCS4_or_ICD10) %>%
dplyr::filter(!OPCS4_or_ICD10 %in% c("#NIS", "#HLT", "#EPO", "#NC")) %>%
unique() %>% data.frame()
# Save file.
write.csv(
x = to_save,
file = here::here("codelists","/our_surgeries_in_OPCS4.csv"),
row.names = FALSE)
setwd("C:/Users/medcmci/OneDrive - University of Leeds/PSTRC/OpenSAFELY/OS technical stuff/GIT/surg-covid-safely")
# Set location of the TRUD mapping table that is saved to the user's machine.
folder_loc_GIT <- choose.dir()
# Load our surgery codelist.
SNOMED_surgeries <-
read_csv(here::here(
"codelists",
"/user-ciaranmci-surgery-covidsurg-replication-excluding-exclusions.csv"),
col_types = cols(code = col_character()
)
)
getwd()
list_of_packages <- c("tidyverse", "here", "qpcR")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
for (i in 1:length(list_of_packages))
{
library(list_of_packages[i],character.only = T)
}
# Set location of the TRUD mapping table that is saved to the user's machine.
folder_loc_GIT <- choose.dir()
# Load our surgery codelist.
SNOMED_surgeries <-
read_csv(here::here(
"codelists",
"/user-ciaranmci-surgery-covidsurg-replication-excluding-exclusions.csv"),
col_types = cols(code = col_character()
)
)
# Load the Abbot additions.
SNOMED_Abbott <-
read_csv(here::here(
"codelists",
"/user-alwynkotze-surgery-covidsurg-replication-codes-from-abbott.csv"),
col_types = cols(code = col_character()
)
)
# Combine the two codelists.
surgeries <- SNOMED_surgeries %>% dplyr::bind_rows(SNOMED_Abbott)
# Load TRUD map.
folder_loc_TRUD <- choose.dir()
TRUDmap <- read_delim(paste0(folder_loc_TRUD, "\\SnomedCT_UKClinicalRF2_PRODUCTION_20220803T000001Z", "\\Full",
"\\RefSet", "\\Map", "\\der2_iisssciRefset_ExtendedMapUKCLFull_GB1000000_20220803.txt"),
delim = "\t", escape_double = FALSE,
col_types = cols(effectiveTime = col_character(),
moduleId = col_character(),
refsetId = col_character(),
referencedComponentId = col_character()
),
trim_ws = TRUE)
# Join the two list based on the SNOMED CT code.
mapping_join <- surgeries %>%
dplyr::left_join(TRUDmap,
by = c("code" = "referencedComponentId")
)
colnames(mapping_join)[1] <- "SNOMED_CT"
colnames(mapping_join)[12] <- "OPCS4_or_ICD10"
## ** but OpenSAFELY reads OPCS-4.10 codes without the decimal point. **
## *********************************************************************
# # Convert OPCS4_or_ICD10 to XX.X format.
# mapping_join$OPCS4_or_ICD10 <-
#   ifelse(mapping_join$OPCS4_or_ICD10 != "#NIS",
#          sub("(.{3})(.*)", "\\1.\\2",
#              mapping_join$OPCS4_or_ICD10),
#          mapping_join$OPCS4_or_ICD10 )
## *********************************************************************
# Select out only the clinical codes for saving.
to_save <- mapping_join %>% dplyr::select(OPCS4_or_ICD10) %>%
dplyr::filter(!OPCS4_or_ICD10 %in% c("#NIS", "#HLT", "#EPO", "#NC")) %>%
unique() %>% data.frame()
# Save file.
write.csv(
x = to_save,
file = here::here("codelists","/our_surgeries_in_OPCS4.csv"),
row.names = FALSE)
